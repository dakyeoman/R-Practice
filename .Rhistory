print(m2)
}
for(i in c(1,3,5,7)){
print(i)
}
for(i in 1:10){
m2<- rbind(m2,m2)
print(m2)
}
m3<-NULL
m2<- rbind(m3,m2)
for(i in 1:10){
m3<- rbind(m3,m2)
print(i)
print(dim(m3))
}
print(dim(m3))
for(i in 1:10){
m3<- rbind(m3,m2)
print(i)
print(dim(m3))
}
m2
m2
m <- matrix(1:15, ncol=3, byrow = T)
m
m2
m2<-data.frame(m)
m2
m[ ,1]<-as.character(m[ ,1])
m
str(m2)
m2[ ,1]<-as.character(m2[ ,1])
str(m2)
m2
m[ ,1]<-as.character(m[ ,1])
m
str(m2)
m2[ ,1]<-as.character(m2[ ,1])
str(m2)
m2$X3 #$를 쓰면 칼럼명을 쓸 수 있다. Xn: n번쨰 행
m2$X4<-c(1,2,3,4,5) #새로운 (5번쨰) 행 선언!
m2
m3<-as.matrix(m2)
#성별 남 여
sex<-c("남","여", "여", "남")
sex2<-ifelse(sex=="남",1,0) #facter -> int
#cbind/rbind = column/row bind: column/row을 묶어줘
cbind(m2,c(3,2,4,5,5))
rbind(m2,c(3,2,4,5))
cbind(m2,m2) #행렬 묶기도 가능
rbind(m2,m2)
for(i in 1:10){
print(i)
}
for(i in c(1,3,5,7)){
print(i)
}
m3<-NULL
for(i in 1:10){
m3<- rbind(m3,m2)
print(i)
print(dim(m3))
}
m3<-NULL
for(i in 1:10){
m3<- rbind(m3,m2)
print(i)
print(dim(m3))
}
m3<-NULL
for(i in 1:10){
m3<- rbind(m3,m2)
print(i)
print(dim(m3))
}
print(dim(m3))
dim(m2)
dim(m3)
dim(m3)
dim(m2)
m3
m3
dim(m3)
cat(i)
next;
if(i %% 2==0){
next;
}
for(i in 1:10){
if(i %% 2==0){
next; #i가 짝수면 넘어감.
}
m3<- rbind(m3,m2)
cat(i) #cat = print
}
cat("/n",i) #cat = print
cat("\n",i) #cat = print
for(i in 1:10){
if(i %% 2==0){
next; #i가 짝수면 넘어감.
}
m3<- rbind(m3,m2)
cat("\n",i) #cat = print
}
"\n"
cat("\n",i)
cat("\n",i) ## "/n" = enter, "/t" = tab
for(i in 1:10){
if(i %% 2==0){
next; #i가 짝수면 넘어감.
}
m3<- rbind(m3,m2)
cat("\n",i) #cat = print
}
m3
cat("\n",i) #cat = print
for(i in 1:10){
if(i %% 2==0){
next; #i가 짝수면 넘어감.
}
m3<- rbind(m3,m2)
cat("\n",i) #cat = print
}
for(i in 1:10){
if(i %% 2==0){
next; #i가 짝수면 넘어감.
}
m3<- rbind(m3,m2)
cat("\n",i) #cat = print
}
"n"
m3<-NULL
for(i in 1:10){
if(i %% 2==0){
}else{
me3<- rbind(m3,m2)
}
cat("\n",i)
}
dim(m2)
m <- matrix(1:15, ncol=3, byrow = T)
m
m2
m2<-data.frame(m)
m2
m[ ,1]<-as.character(m[ ,1])
m
str(m2)
m2[ ,1]<-as.character(m2[ ,1])
str(m2)
m3<-NULL
for(i in 1:10){
if(i %% 2==0){
}else{
me3<- rbind(m3,m2)
}
cat("\n",i)
}
dim(m2)
cat("\n",i) #cat = print
##if 문
m3<-NULL
for(i in 1:10){
if(i %% 2==0){
}else{
m3<- rbind(m3,m2)
}
cat("\n",i) #cat = print
}
"n"
dim(m3)
if(i %% 2==0){
#(아무것도 실행하지 않음)
}else{
m3<- rbind(m3,m2)
}
#While
i <-1
while(TRUE){
}
print(i)
while(TRUE){
print(i)
}
#While
i <-1
while(TRUE){
print(i)
}
while(TRUE){
print(i)
}
i<-i+1
while(i<100){
print(i)
i<-i+1
}
break;
#While
i <-1
while(i<100){
if(i >50){
break;
}
print(i)
i<-i+1
}
#for < while 사용 빈도
#for < while 사용 빈도
#i : 1~10까지 : for
? runif
#j < 0.00001
i<-100
while(i<0.00001){
runif(1)
? runif
}
#j < 0.00001
i<-100
while(i<0.00001){
runif(1)
? runif
}
``
runif(10,min=10, max=20)
? runif
runif(10,min=-0.001, max=0.01)
i <-i-runif(10,min=-0.001, max=0.01)
? runif
#j < 0.00001
i<-100
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
? runif
}
``
cat("\n",i)
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
#j < 0.00001
i<-100
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
``
#j < 0.00001
i<-100
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
#j < 0.00001
i<-100
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
cat("\n",i)
while(i<0.00001){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
while(i<0.01){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
while(i<0.01){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
#j < 0.00001
i<-100
while(i<0.01){
i <-i-runif(10,min=-0.001, max=0.01)
cat("\n",i)
}
i <- i -runif(1, min=-0.001, max=0.01)
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
cat("\n",i)
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i<0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
i<-100
while(i>0.01){
i <- i -runif(1, min=-0.001, max=0.01)
cat("\n",i)
}
m <- matrix(1:15, ncol=3, byrow = T)
colnames(m2)
paste0("v", 1:3)
m <- matrix(1:15, ncol=3, byrow = T)
m2 <- data.frame(m)
colnames(m2)
paste0("v", 1:3)
colnames(m2)<-paste0("v", 1:3)
colnames(m2)<-paste0("v", 1:3)m2
m2
getwd()
"/Users/adrua/Desktop/R-Practice"
getwd()
getwd() #wd:working directory
setwd("/Users/adrua/Desktop/R-Practice")
getwd() #wd:working directory
getwd() #wd:working directory
setwd("/Users/adrua/Desktop/R-Practice")
getwd()
setwd("Users\\adrua\\Desktop\\R-Practice")
setwd("\Users\\adrua\\Desktop\\R-Practice")
setwd("\\Users\\adrua\\Desktop\\R-Practice")
d()
setwd("/Users/adrua/Desktop/R-Practice")
getwd()
getwd() #wd:working directory
setwd("/Users/adrua/Desktop/R-Practice")
getwd()
write.csv(m2,"m2.csv")
aaa<-read.csv("m2.csv")
aaa
dim(aaa)
rownames(m2)
rownames(m2) #행으로 인식됨 -> 불러들일 때 첫째 열 삭제or 저장 시 rownames 삭제
write.csv(m2,"m2.csv")
aaa<-read.csv("m2.csv")
aaa
write.csv(m2,"m2.csv", row.names = F)
aaa<-read.csv("m2.csv")
aaa
dim(aaa)
write.csv(m2,"m2.csv", row.names = F) #delete rownames
aaa<-read.csv("m2.csv")
aaa
dim(aaa)
save(m2, file = "m2, RData")
load("m2.RData")
save(m2, file = "m2.RData")
load("m2.RData")
m2
#csv는 매트릭스나 데이터프레임의 형태로만 저장됨(깨질 수도 있음)
#csv는 엑셀:매트릭스나 데이터프레임의 형태로만 저장됨(깨질 수도 있음)
#RData: 빠름!벡터, 데이터프레임, 매트릭스, 기타등등 저장-그 형태 그대로 가져올 수 있다.
lista
lista[[1]]<-m2
lista<-list()
lista
lista[[1]]<-m2
lista
lista[[2]]<-c(1,2,3)
lista[[3]]<-c("a","b","c")
lista
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방&작은 방[]
lista
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
lista[[2]]<-c(1,2,3)
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
lista[[2]][2]
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
lista[[3]][2]
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
lista[[1]][2]
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
lista[[1]][2,3]
#vector, dataframe, matrix - 작은방/list >>큰 [[]]방:형태 무관&작은 방[]
#각각의 큰 방과 작은 방에 접근 가능.
lista[[1]][2,]
aa<-lista[[1]]
aa[1,]
load("lista.RData")
load("lista.RData")
save(lista,file="lista.RData")
load("lista.RData")
lista
m2[,1]
m<-matrix(1:15, ncol=3, byrow = T)
m
m[,1]<-as.character(m[,1])
m[,1]<-as.character(m[,1])
m
m[,1]<-as.numeric(m[,1])
m
data.frame(m)
str(m)
str(m)
m[,1]<-as.numeric(m[,1])
str(m)
m[,1]<-as.numeric(m[,1])
for(i in 1:ncol(m)){}
m<-data.frame(m)
str(m)
m[,1]<-as.numeric(m[,1])
m<-matrix(1:15, ncol=3, byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
m[,1]<-as.numeric(m[,1])
m<-matrix(1:15, ncol=3, byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
m[,1]<-as.numeric(m[,1])
str(m)
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
m[,1]<-as.numeric(m[,1])
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m<-data.frame(m)
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
m<-matrix(1:15,ncol=3,byrow = T)
m[,1]<-as.character(m[,1])
m<-data.frame(m)
str(m)
m<-matrix()
m<-matrix(1:15, ncol=3, byrow = T)
m[ ,1]<-as.character(m[ ,1])
m<-data.frame(m)
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m<-matrix(1:15, ncol=3, byrow = T)
m[ ,1]<-as.character(m[ ,1])
m<-data.frame(m)
str(m)
str(m)
m<-data.frame(m)
str(m)
m<-matrix(1:15, ncol=3, byrow = T)
m[ ,1]<-as.character(m[ ,1])
m<-data.frame(m)
str(m)
m[,i]<-as.numeric(m[,i])
n 1:ncol(m)){
m[,i]<-as.numeric(m[,i])
}
for(i in 1:ncol(m)){
m[,i]<-as.numeric(m[,i])
}
str(m)
#행렬의 문자열 -> 숫자로 for 문 이용해서 변환하기
m<-matrix(1:15, ncol=3, byrow = T)
m[ ,1]<-as.character(m[ ,1])
m<-data.frame(m)
str(m)
for(i in 1:ncol(m)){
m[,i]<-as.numeric(m[,i])
}
str(m)
